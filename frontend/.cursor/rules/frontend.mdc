---
description: rules for frontend development
globs:
alwaysApply: true
---

# code style

- NEVER EVER add comments to code. The only exceptions are you can add a docstring
  to a function or module. Otherwise, NO COMMENTS.

- use *kebab-case* for Typescript file names

- if error info needs to be returned to the calling function, just throw an
  appropriate error. do not return an object with error info. This rule does not
  apply to server actions, which can return error info in the response.

# project planning

- when starting on a medium to large sized change, first write a markdown
  project plan into the folder .cursor/projects/, and ask for review

- as you work, update the project plan and mark tasks as complete

- only work on one phase of a project at a time. always ask before continuing to
  the next phase

- include testing plans in the project plan

# components

- ALWAYS use frontend components from /components/ui when possible

- if a shadcn ui component is not available in /components/ui, install it with
  `npx shadcn@latest add component-name`

- ALWAYS use lucide-react for icons if possible

# testing - MANDATORY STEP

- ðŸš¨ CRITICAL: IMMEDIATELY run `npm test` after ANY code changes, especially:
  - After implementing new features
  - After editing existing code
  - After making UI changes
  - Before marking any task as complete

- Tests are REQUIRED to pass before considering work done
- Use test results to guide development progress
- Never bypass tests with NODE_ENV checks

- WORKFLOW: Code â†’ Test â†’ Fix â†’ Test â†’ Complete
- If you forget to run tests, the task is NOT complete

# conventions

- do not use api routes in next.js

- only use html forms when building a real form with react-forms
  (validation, multiple fields, etc)

- only use react server functions (i.e. /actions) as short-lived RPCs
  * when there is more than 3 seconds of work, use inngest
  * do not use prevState or formData in server actions
  * use try/catch within an action to log useful backend error messages
  * use try/catch on the client to generate meaningful error UX, e.g. show a toast
  * do not use redirect() or notFound() in server actions
  * only call server actions from client components
  * give action files a descriptive name and put them in an `actions/` directory
  * do not create a server function just to call supabase
  * avoid using `startTransition` with server actions
  * use server actions to interact with services that have private secrets

- use server components only for static content. for loading data, use SWR

- do not show error messages with internal information to users. Show a generic
  error message and console.error() the details

- for toast messages, call sonner directly

# database and deployment

- create and modify sql schemas in /db/schema. Do not edit
  `/supabase/migrations/` -- this is autogenerated
